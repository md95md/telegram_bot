import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CommandHandler, CallbackQueryHandler

import os

TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")

user_states = {}

print(f"BOT TOKEN = {TELEGRAM_BOT_TOKEN}")

MOOD_TEMPLATES = {
    "melancholic": "A symbolic acrylic painting with bold brush strokes and clean, bright colors.\nThe scene expresses a sense of melancholy with a focus on {subject} ‚Äî {user_input}.\nMuted tones and a quiet, introspective atmosphere. Format: 1:1. Palette: {palette}.",

    "joyful": "A symbolic acrylic painting with bold brush strokes and clean, bright colors.\nThe scene conveys joy and celebration through {subject} ‚Äî {user_input}.\nVibrant hues and playful brush patterns. Format: 1:1. Palette: {palette}.",

    "aggressive": "A symbolic acrylic painting with bold brush strokes and clean, bright colors.\nThe scene bursts with intensity and anger, focused on {subject} ‚Äî {user_input}.\nSharp contrasts and chaotic textures. Format: 1:1. Palette: {palette}.",

    "romantic": "A symbolic acrylic painting with bold brush strokes and clean, bright colors.\nThe scene radiates love and intimacy using {subject} ‚Äî {user_input}.\nSoft glows and warm tones. Format: 1:1. Palette: {palette}.",

    "spiritual": "A symbolic acrylic painting with bold brush strokes and clean, bright colors.\nThe scene evokes a spiritual or meditative state through {subject} ‚Äî {user_input}.\nFloating forms and tranquil gradients. Format: 1:1. Palette: {palette}.",

    "calm": "A symbolic acrylic painting with bold brush strokes and clean, bright colors.\nThe scene captures peacefulness with {subject} ‚Äî {user_input}.\nBalanced shapes and gentle lighting. Format: 1:1. Palette: {palette}."
}

async def prompt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {"state": "choosing_mood"}
    keyboard = [
        [InlineKeyboardButton("\uD83C\uDF27Ô∏è –ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ", callback_data="mood_melancholic")],
        [InlineKeyboardButton("\uD83C\uDF1E –†–∞–¥–æ—Å—Ç–Ω–æ–µ", callback_data="mood_joyful")],
        [InlineKeyboardButton("\uD83D\uDD25 –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ", callback_data="mood_aggressive")],
        [InlineKeyboardButton("\uD83D\uDC98 –í–ª—é–±–ª–µ–Ω–Ω–æ—Å—Ç—å", callback_data="mood_romantic")],
        [InlineKeyboardButton("\uD83E\uDDE8 –î—É—Ö–æ–≤–Ω–æ–µ", callback_data="mood_spiritual")],
        [InlineKeyboardButton("\uD83C\uDF3F –°–ø–æ–∫–æ–π–Ω–æ–µ", callback_data="mood_calm")]
    ]
    await update.message.reply_text("–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã—Ä–∞–∑–∏—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?", reply_markup=InlineKeyboardMarkup(keyboard))

async def mood_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    mood_key = query.data.replace("mood_", "")
    user_states[user_id] = {"state": "choosing_palette", "mood": mood_key}

    keyboard = [
        [InlineKeyboardButton("–Ø—Ä–∫–∞—è", callback_data="palette_bright")],
        [InlineKeyboardButton("–ü–∞—Å—Ç–µ–ª—å–Ω–∞—è", callback_data="palette_pastel")],
        [InlineKeyboardButton("–ü—Å–∏—Ö–æ–¥–µ–ª–∏—á–µ—Å–∫–∞—è", callback_data="palette_psychedelic")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è", callback_data="palette_contrast")],
        [InlineKeyboardButton("–û–¥–Ω–æ—Ç–æ–Ω–Ω–∞—è", callback_data="palette_monochrome")],
        [InlineKeyboardButton("–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è", callback_data="palette_bw")]
    ]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

async def palette_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    palette = query.data.replace("palette_", "")
    user_states[user_id]["palette"] = palette
    user_states[user_id]["state"] = "choosing_subject"

    keyboard = [
        [InlineKeyboardButton("üë• –õ—é–¥–∏", callback_data="subject_people")],
        [InlineKeyboardButton("üêæ –ñ–∏–≤–æ—Ç–Ω—ã–µ", callback_data="subject_animals")],
        [InlineKeyboardButton("üåÑ –ü–µ–π–∑–∞–∂", callback_data="subject_landscape")],
        [InlineKeyboardButton("üñ® –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è", callback_data="subject_abstract")],
        [InlineKeyboardButton("üìñ –°—é–∂–µ—Ç", callback_data="subject_narrative")],
        [InlineKeyboardButton("üå∫ –¶–≤–µ—Ç—ã", callback_data="subject_flowers")]
    ]
    await query.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–µ?", reply_markup=InlineKeyboardMarkup(keyboard))

async def subject_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    subject = query.data.replace("subject_", "")
    user_states[user_id]["subject"] = subject
    user_states[user_id]["state"] = "waiting_for_description"
    await query.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–µ:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "/prompt":
        return

    if user_id in user_states:
        state_info = user_states[user_id]
        if state_info["state"] == "waiting_for_description":
            mood = state_info["mood"]
            palette = state_info["palette"]
            subject = state_info["subject"]
            styled_prompt = MOOD_TEMPLATES[mood].format(user_input=text, palette=palette, subject=subject)
            await update.message.reply_text(f"üéØ Prompt:\n{styled_prompt}\n\n–°–∫–æ–ø–∏—Ä—É–π –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å –≤ DALL¬∑E: https://openai.com/dall-e")
            del user_states[user_id]
            return

    if chat_type == "private":
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /prompt.")
    else:
        return

    await update.message.reply_text("Type /prompt to start.")


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("prompt", prompt_command))
    app.add_handler(CallbackQueryHandler(mood_chosen, pattern="^mood_"))
    app.add_handler(CallbackQueryHandler(palette_chosen, pattern="^palette_"))
    app.add_handler(CallbackQueryHandler(subject_chosen, pattern="^subject_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
